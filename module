WITH account_data AS (
  SELECT
    s.date,
    sp.country,
    acc.send_interval,
    acc.is_verified,
    acc.is_unsubscribed,
    COUNT(DISTINCT acc.id) AS account_cnt,
    0 AS sent_msg,
    0 AS open_msg,
    0 AS visit_msg
  FROM `data-analytics-mate.DA.account` acc
  JOIN `data-analytics-mate.DA.account_session` ass
    ON acc.id = ass.account_id
  JOIN `data-analytics-mate.DA.session` s
    ON ass.ga_session_id = s.ga_session_id
  JOIN `data-analytics-mate.DA.session_params` sp
    ON s.ga_session_id = sp.ga_session_id
  GROUP BY s.date, sp.country, acc.send_interval, acc.is_verified, acc.is_unsubscribed
),
email_data AS (
  SELECT
    DATE_ADD(s.date, INTERVAL ems.sent_date DAY) AS date,
    sp.country,
    acc.send_interval,
    acc.is_verified,
    acc.is_unsubscribed,
    0 AS account_cnt,
    COUNT(DISTINCT ems.id_message) AS sent_msg,
    COUNT(DISTINCT eo.id_message) AS open_msg,
    COUNT(DISTINCT ev.id_message) AS visit_msg
  FROM `data-analytics-mate.DA.email_sent` ems
  JOIN `data-analytics-mate.DA.account_session` ass
    ON ems.id_account = ass.account_id
  JOIN `data-analytics-mate.DA.session` s
    ON ass.ga_session_id = s.ga_session_id
  JOIN `data-analytics-mate.DA.session_params` sp
    ON s.ga_session_id = sp.ga_session_id
  JOIN `data-analytics-mate.DA.account` acc
    ON ems.id_account = acc.id
  LEFT JOIN `data-analytics-mate.DA.email_open` eo
    ON ems.id_message = eo.id_message
  LEFT JOIN `data-analytics-mate.DA.email_visit` ev
    ON ems.id_message = ev.id_message
  GROUP BY date, sp.country, acc.send_interval, acc.is_verified, acc.is_unsubscribed
),
combined AS (
  SELECT * FROM account_data
  UNION ALL
  SELECT * FROM email_data
),
aggregated AS (
  SELECT
    date,
    country,
    send_interval,
    is_verified,
    is_unsubscribed,
    SUM(account_cnt) AS account_cnt,
    SUM(sent_msg) AS sent_msg,
    SUM(open_msg) AS open_msg,
    SUM(visit_msg) AS visit_msg
  FROM combined
  GROUP BY date, country, send_interval, is_verified, is_unsubscribed
),
with_totals AS (
  SELECT
    *,
    SUM(account_cnt) OVER(PARTITION BY country) AS total_country_account_cnt,
    SUM(sent_msg) OVER(PARTITION BY country) AS total_country_sent_cnt
  FROM aggregated
),
final AS (
  SELECT *,
    DENSE_RANK() OVER(ORDER BY total_country_account_cnt DESC) AS rank_total_country_account_cnt,
    DENSE_RANK() OVER(ORDER BY total_country_sent_cnt DESC) AS rank_total_country_sent_cnt
  FROM with_totals
)
SELECT *
FROM final
WHERE rank_total_country_account_cnt <= 10 OR rank_total_country_sent_cnt <= 10;

